<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <bean id="fs.blob.store" class="org.hashsplit4j.store.FileSystemBlobStore">
        <constructor-arg value="${blob.storage.location}" />
    </bean>
    
    <bean id="voldemort.blob.store" class="io.milton.sync.VoldemortBlobClientManager">
        <constructor-arg value="${bootstrap_urls}"/>
        <constructor-arg value="${voldemort.storeName}"/>
        <constructor-arg value="${voldemort.blobstore.enabled}"/>
    </bean>

    <bean id="migrating.blob.store" class="org.hashsplit4j.store.MigratingBlobStore">
        <constructor-arg ref="${id.blob.primary}" />
        <constructor-arg ref="${id.blob.backup}" />
    </bean>

    <bean id="backup.http.blob.store" class="org.hashsplit4j.store.HttpBlobStore">
        <constructor-arg value="${blob.storage.http.backupServer}" index="0" />
        <constructor-arg value="${blob.storage.http.backupPort}" index="1" />
        <constructor-arg value="${blob.storage.http.path}" index="2" />
        <constructor-arg value="${blob.storage.http.user}" index="3" />
        <constructor-arg value="${blob.storage.http.password}" index="4" />
    </bean>


    <bean id="primary.http.blob.store" class="org.hashsplit4j.store.HttpBlobStore">
        <constructor-arg value="${blob.storage.http.server}" index="0" />
        <constructor-arg value="${blob.storage.http.port}" index="1" />
        <constructor-arg value="${blob.storage.http.path}" index="2" />
        <constructor-arg value="${blob.storage.http.user}" index="3" />
        <constructor-arg value="${blob.storage.http.password}" index="4" />
    </bean>

    <bean id="http.blob.store" class="org.hashsplit4j.store.HABlobStore">
        <constructor-arg ref="primary.http.blob.store" />
        <constructor-arg ref="backup.http.blob.store" />
    </bean>

    <bean id="blob.store" class="org.hashsplit4j.store.JCSCachingBlobStore">
        <constructor-arg ref="${id.blob.store}" />
        <constructor-arg value="5000" /> <!-- cache capacity -->
    </bean>

    <bean id="hashsplit.http.transport" class="org.hashsplit4j.store.HashsplitHttpTransport">
        <constructor-arg  value="${remote.storage.server}" />
        <constructor-arg  value="${remote.storage.port}" />
        <constructor-arg  value="${remote.storage.user}" />
        <constructor-arg  value="${remote.storage.password}" />
    </bean>

    <bean id="db.hash.store" class="io.milton.vfs.content.DbHashStore"/>

    <bean id="wrapped.db.hash.store" class="io.milton.sync.SessionPerRequestHashStore">
        <constructor-arg ref="session.manager" />
        <constructor-arg ref="db.hash.store" />
    </bean>
    
    <bean id="remote.hash.store" class="org.hashsplit4j.store.HttpHashStore">
        <constructor-arg ref="hashsplit.http.transport" />
    </bean>
    
    

    <!-- We can use remote hashstore as well as db, good for QA and local dev -->
    <bean id="migrating.hash.store" class="org.hashsplit4j.store.MigratingHashStore">
        <constructor-arg ref="wrapped.db.hash.store" />
        <constructor-arg ref="remote.hash.store" />
    </bean>

    <bean id="hash.store" class="org.hashsplit4j.store.CachingHashStore">
        <constructor-arg ref="${hash.store.id}" />
        <constructor-arg value="10000" />
    </bean>


    <bean id="local.less.compiler" class="co.kademi.common.less.LocalLessCompiler"/>

    <bean id="remote.less.compiler" class="co.kademi.common.less.RemoteLessCompiler">
        <constructor-arg value="${less.remote.url}" />
    </bean>
</beans>